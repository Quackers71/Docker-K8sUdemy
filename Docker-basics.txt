## Docker Basics

# This is a duplicate from my Docker Repo

# Installing the latest Docker on Linux...

https://get.docker.com/
curl -fsSL get.docker.com -o get-docker.sh
sh get-docker.sh
sudo usermod -aG docker ubuntu # to run docker commands as sudo

# next install docker machine
https://docs.docker.com/machine/install-machine/

$ base=https://github.com/docker/machine/releases/download/v0.14.0 &&
  curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
  sudo install /tmp/docker-machine /usr/local/bin/docker-machine

docker-machine version # to test docker machine has install correctly

# Alternatively for docker machine download via Github
https://github.com/docker/machine/releases

curl -L https://github.com/docker/machine/releases/download/v0.15.0/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
chmod +x /tmp/docker-machine &&
sudo cp /tmp/docker-machine /usr/local/bin/docker-machine


# last install docker compose
https://docs.docker.com/compose/install/#install-compose

sudo curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

# Alternatively for docker compose download via Github
https://github.com/docker/compose/releases

sudo -i
curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

docker-compose version

## docker-and-kubernetes-the-complete-guide

## Section 1: Dive into Docker

# 8. Using the Docker Client

docker run hello-world # this acually failed so ran
docker login
docker run hello-world

## Section 2: Manipulating Containers with the Docker Client

# 12. Overriding Default Commands
docker run busybox echo hi there
# Output "hi there"

docker run busybox ls
bin
dev
etc
...
...
# These are folders that belong on the busybox image

# 13. Listing Running Containers

docker run busybox ping google.com
docker ps # In a 2nd Terminal - You will see the running Container
# Container ID | Image   | Command 			 | Created 		| Status	 | Ports | Names
# 14aded86a0cd | busybox | "ping.google.com" | 25 secs ago  | Up 23 secs | 		 | epic_coriander

docker ps 
# Lists Running Containers

docker ps --all
# Lists All Containers that are or have ever ran

docker run = docker create + docker start

ubuntu@ip-172-31-27-210:~$ docker create hello-world
451d918f0f923a7eb7aba3300f5e3bb3a629a67cf7918081683ea33019b2eea6
ubuntu@ip-172-31-27-210:~$ docker start 451d918f0f923a7eb7aba3300f5e3bb3a629a67cf7918081683ea33019b2eea6
451d918f0f923a7eb7aba3300f5e3bb3a629a67cf7918081683ea33019b2eea6

docker system prune
docker create busybox echo hi there
docker start -a 3cf2305fb276ee6a7c932f82a5fd7bee5537323c1de3853dd8de7840e79fac23
docker ps -a
docker create busybox ping google.com
docker start 119af6e7db41e13b85b2c59efaeb119229f3e87f4c7d5de3b89b5f11d78812b3
docker logs 119af6e7db41e13b85b2c59efaeb119229f3e87f4c7d5de3b89b5f11d78812b3
docker ps
docker logs 119af6e7db41e13b85b2c59efaeb119229f3e87f4c7d5de3b89b5f11d78812b3
docker stop 119af6e7db41e13b85b2c59efaeb119229f3e87f4c7d5de3b89b5f11d78812b3
docker start 119af6e7db41e13b85b2c59efaeb119229f3e87f4c7d5de3b89b5f11d78812b3
docker kill 119af6e7db41e13b85b2c59efaeb119229f3e87f4c7d5de3b89b5f11d78812b3


docker run --name redisinstance -d redis
ubuntu@ip-172-31-27-210:~$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
0701cb4f73c9        redis               "docker-entrypoint.sâ€¦"   7 minutes ago       Up 7 minutes        6379/tcp            redisinstance

docker exec -ti redisinstance sh
docker exec -ti redisinstance redis-cli

STDIN	|	STDOUT	|	STDERR

bash	|	powershell	|	zsh	|	sh

docker run -ti busybox sh # Ran from 1st Terminal
docker run -ti busybox sh # Ran from 2nd Terminal
docker ps # Ran from 3rd Terminal
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES
da22b429a1db        busybox             "sh"                     About a minute ago   Up About a minute                       ecstatic_goldstine
e451b5a7f25e        busybox             "sh"                     About a minute ago   Up About a minute                       suspicious_heyrovsky

touch hithere # File create on 1st Terminal
ls # ran on 2nd Terminal has no association on 1st Terminal

## Section 3: Building Custom Images Through Docker Server

mkdir redis-server
cd redis-server


vim Dockerfile

[
# Use an existing docker image as a base
FROM alpine

# Download and install a dependency
RUN apk add --update redis

# Tell the image what to do when it starts as a container
CMD ["redis-server"]

# Save the File :wq
]


ubuntu@ip-172-31-27-210:~/redis-image$ docker build .    # This will build the image from the Dockerfile in this directory
Sending build context to Docker daemon  2.048kB
Step 1/3 : FROM alpine
latest: Pulling from library/alpine
4fe2ade4980c: Already exists
Digest: sha256:621c2f39f8133acb8e64023a94dbdf0d5ca81896102b9e57c0dc184cadaf5528
Status: Downloaded newer image for alpine:latest
 ---> 196d12cf6ab1
Step 2/3 : RUN apk add --update redis
 ---> Running in 63ef62240ac4
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/community/x86_64/APKINDEX.tar.gz
(1/1) Installing redis (4.0.11-r0)
Executing redis-4.0.11-r0.pre-install
Executing redis-4.0.11-r0.post-install
Executing busybox-1.28.4-r1.trigger
OK: 6 MiB in 14 packages
Removing intermediate container 63ef62240ac4
 ---> 47422ba49004
Step 3/3 : CMD ["redis-server"]
 ---> Running in 08f6dd424181
Removing intermediate container 08f6dd424181
 ---> c1fd1babf388
Successfully built c1fd1babf388


ubuntu@ip-172-31-27-210:~/redis-image$ docker run c1fd1babf388
1:C 25 Oct 20:07:24.017 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
1:C 25 Oct 20:07:24.017 # Redis version=4.0.11, bits=64, commit=bca38d14, modified=0, pid=1, just started
1:C 25 Oct 20:07:24.017 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
1:M 25 Oct 20:07:24.019 * Running mode=standalone, port=6379.
1:M 25 Oct 20:07:24.019 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
1:M 25 Oct 20:07:24.019 # Server initialized
1:M 25 Oct 20:07:24.019 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
1:M 25 Oct 20:07:24.019 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
1:M 25 Oct 20:07:24.019 * Ready to accept connections

# 32. Tagging an Image

ubuntu@ip-172-31-27-210:~/redis-image$ docker build -t redquacks/redis:latest .
Sending build context to Docker daemon  2.048kB
Step 1/4 : FROM alpine
 ---> 196d12cf6ab1
Step 2/4 : RUN apk add --update gcc
 ---> Using cache
 ---> 4f6e948ec8e0
Step 3/4 : RUN apk add --update redis
 ---> Using cache
 ---> 5afb124da534
Step 4/4 : CMD ["redis-server"]
 ---> Using cache
 ---> 75f85a70096c
Successfully built 75f85a70096c
Successfully tagged redquacks/redis:latest

redquacks	/			redis		:	latest
Docker ID	|	Repo/Project name	|	Version

# 33. Manual Image Generation with Docker Commit

ubuntu@ip-172-31-27-210:~$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
fafdb479ff5b        alpine              "sh"                38 seconds ago      Up 37 seconds                           condescending_montalcini
ubuntu@ip-172-31-27-210:~$ docker commit -c 'CMD ["redis-server"]' fafdb479ff5b
sha256:5b253f5bcdc6d8f640092a7e1025aa5fc984febc0619008922854cb5b37ffdd3
ubuntu@ip-172-31-27-210:~$

# This creates an Image from a running snapshot of the redis docker container 
# -c flag uses the CMD from the Dockerfile

## Section 4: Making Real Projects with Docker

# 34. Project Outline

# Dockerfile, index.js and package.json
# have been added in to the /simpleweb Folder
# this has also been added to the EC2 instance including access to this Repo

docker build . # Has been ran multiple times within the /simpleweb Folder
# Then
docker build -t quackers/simpleweb .
docker run -p 8080:8080 quackers/simpleweb






